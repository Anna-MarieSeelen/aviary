onsuccess:
    print("Aviary finished, no error")

onerror:
    print("An error occurred")

onstart:
    import os
    import sys


    from snakemake.utils import logger, min_version

    # minimum required snakemake version
    min_version("6.0")
    long_reads = config["long_reads"]
    fasta = config["fasta"]
    short_reads_1 = config["short_reads_1"]
    short_reads_2 = config["short_reads_2"]
    min_contig_size = config["min_contig_size"]
    min_bin_size = config["min_bin_size"]
    gtdbtk_folder = config["gtdbtk_folder"]
    busco_folder = config["busco_folder"]
    threads = config["max_threads"]
    ## pplacer deadlocks on too many threads
    pplacer_threads = min(48, int(config["pplacer_threads"]))
    import os
    import sys

    if long_reads == "none" and short_reads_1 == "none":
        sys.exit("Need at least one of long_reads or short_reads_1")
    if long_reads != "none" and not os.path.exists(long_reads[0]):
        sys.exit("long_reads does not point to a file")
    if short_reads_1 != "none" and not os.path.exists(short_reads_1[0]):
        sys.exit("short_reads_1 does not point to a file")
    if short_reads_2 != "none" and not os.path.exists(short_reads_2[0]):
        sys.exit("short_reads_2 does not point to a file")
    if gtdbtk_folder != "none" and not os.path.exists(gtdbtk_folder):
        sys.stderr.write("gtdbtk_folder does not point to a folder\n")
    if busco_folder != "none" and not os.path.exists(busco_folder):
        sys.stderr.write("busco_folder does not point to a folder\n")


from snakemake.utils import min_version
min_version("6.0")


if config["fasta"] == "none":
    module assembly:
        snakefile: "modules/assembly/assembly.smk"
        config: config
        
    if config["long_reads"] == "none" and config["short_reads_1"] != "none":
        use rule spades_assembly_short from assembly with:
             output: "data/final_contigs.fasta"
             
        config["fasta"] = "data/final_contigs.fasta"
        
        module binning:
            snakefile: "modules/binning/binning.smk"
            config: config
            
        use rule * from binning as *
        # Create summary webpage
        rule create_webpage_short_assembly:
            input:
                checkm_file = "data/checkm.out",
                final_bins = "data/das_tool_bins/done",
                busco_done = "data/busco/done",
                fasta = "data/final_contigs.fasta",
                long_reads_qc_html = "www/nanoplot/longReadsNanoPlot-report.html",
                short_reads_qc_html = "www/short_reads_fastqc.html",
                genes_gff = "data/genes.gff",
                gtdbtk_done = "data/gtdbtk/done",
                singlem_done = "data/singlem_out/singlem_appraise.svg",
                # strain_profile = "data/instrain/output/instrain_scaffold_info.tsv"
            output:
                "www/index.html"
            threads:
                config["max_threads"]
            conda:
                "envs/webpage.yaml"
            script:
                "scripts/create_slamm_webpage.py"


    else:
        use rule * from assembly as *
        use rule * from binning as *
        # Create summary webpage
        rule create_webpage_long_assembly:
            input:
                checkm_file = "data/checkm.out",
                final_bins = "data/das_tool_bins/done",
                busco_done = "data/busco/done",
                fasta = "data/final_contigs.fasta",
                long_reads_qc_html = "www/nanoplot/longReadsNanoPlot-report.html",
                short_reads_qc_html = "www/short_reads_fastqc.html",
                genes_gff = "data/genes.gff",
                gtdbtk_done = "data/gtdbtk/done",
                singlem_done = "data/singlem_out/singlem_appraise.svg",
                # strain_profile = "data/instrain/output/instrain_scaffold_info.tsv"
            output:
                "www/index.html"
            threads:
                config["max_threads"]
            conda:
                "envs/webpage.yaml"
            script:
                "scripts/create_slamm_webpage.py"


else:
    module binning:
        snakefile: "modules/binning/binning.smk"
        config: config
        
    use rule * from binning as *
    # Create summary webpage
    rule create_webpage_binning_only:
        input:
            checkm_file = "data/checkm.out",
            final_bins = "data/das_tool_bins/done",
            busco_done = "data/busco/done",
            fasta = "data/final_contigs.fasta",
            long_reads_qc_html = "www/nanoplot/longReadsNanoPlot-report.html",
            short_reads_qc_html = "www/short_reads_fastqc.html",
            genes_gff = "data/genes.gff",
            gtdbtk_done = "data/gtdbtk/done",
            singlem_done = "data/singlem_out/singlem_appraise.svg",
            # strain_profile = "data/instrain/output/instrain_scaffold_info.tsv"
        output:
            "www/index.html"
        threads:
            config["max_threads"]
        conda:
            "envs/webpage.yaml"
        script:
            "scripts/create_slamm_webpage.py"

